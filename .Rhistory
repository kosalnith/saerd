---
title: "Mathematics for Economist"
knitr::opts_chunk$set(echo = TRUE)
devtools::source_gist("c83e078bf8c81b035e32c3fc0cf04ee8",
filename = 'render_toc.R')
install.packages('blogdown')
remotes::install_github('rstudio/blogdown')
### Simulate Samuelson 1939
#Clear the environment
rm(list=ls(all=TRUE))
# Set number of periods for which you want to simulate
T=100
# Set number of parameterisations that will be considered
S=2
# Set period in which shock or shift in an will occur
s=15
# Set fixed parameter values here!
beta = 0.3
c1 = 0.8
# Construct matrices in which values for different periods will be stored; initialise at 1
C=matrix(data=1, nrow=S, ncol=T)
I=matrix(data=1, nrow=S, ncol=T)
#Construct matrices for exogenous variable or parameter that will change over time to capture different scenarios
G0=matrix(data=5, nrow=S, ncol=T)
# Implement government spending shock here!
G0[2, s:T] = 6
#Solve this system recursively based on the initialisation
for (i in 1:S){
for (t in 2:T){
for (iterations in 1:100){
C[i,t] = c1*(C[i,t-1] + I[i,t-1] + G0[i,t-1])
I[i,t] = beta*(c1*(C[i,t-1] + I[i,t-1] + G0[i,t-1]) - C[i,t-1])
} # close iterations loop
} # close time loop
}   # close scenarios loop
# Calculate output
Y=C+G0+I
# Plot output
# Time series chart of output dynamics for different scenarios in Samuelson (1939) model
plot(Y[1, 1:100],type="l", col=1, lwd=2, lty=1, xlab="Time", ylab="Y", ylim=range(min(Y[1,], Y[2,]), max(Y[1,], Y[2,])))
title(main="Output under government spending shock", cex=0.8)
lines(Y[2, 1:100],lty=2)
legend("bottomright", legend=c("Baseline", "Increase in G0"),
lty=1:2, cex=0.8, bty = "n", y.intersp=0.8)
### Simulate y(t) =a0 + a1*y(t-1)
# Set number of periods for which you want to simulate
T=100
# Set parameter values
a0 = 1
a1 = 0.8
# Compute equilibrium (particular solution)
(y_eq= a0/(1-a1))
# Construct matrices in which values for different periods will be stored; initialise at 1
y=matrix(data=1, nrow=1, ncol=T)
#Solve this equation recursively based on the initialisation
for (t in 2:T){
y[,t] = a0 + a1*y[,t-1]
} # close time loop
# Plot dynamics of y
plot(y[, 1:40],type="l", col=1, lwd=2, lty=1, xlab="Time", ylab="y")
title(main="", cex=0.8)
# Set number of periods for which you want to simulate
T=100
# Set parameter values
a0 = 1
a1 = 1.2
# Compute equilibrium (particular solution)
(y_eq= a0/(1-a1))
# Construct matrices in which values for different periods will be stored; initialise at 1
y=matrix(data=1, nrow=1, ncol=T)
#Solve this equation recursively based on the initialisation
for (t in 2:T){
y[,t] = a0 + a1*y[,t-1]
} # close time loop
# Plot dynamics of y
plot(y[, 1:40],type="l", col=1, lwd=2, lty=1, xlab="Time", ylab="y")
title(main="", cex=0.8)
## Find eigenvalues and eigenvectors of matrix
# Define matrix
J=matrix(c(7, -15,
2, -4), 2, 2, byrow=TRUE)
# Obtain eigenvalues and eigenvectors
ev=eigen(J)
(evals = ev$values)
(evecs = ev$vector)
# Normalise eigenvectors by dividing through by the first element
evecs_norm=evecs
for (i in 1:2){
evecs_norm[,i]=evecs[,i]/evecs[1,i]
}
evecs_norm
## Lab 2
# Set number of periods for which you want to simulate
T=100
# Construct matrices in which values for different periods will be stored; initialise at 1
y1=matrix(data=1, nrow=1, ncol=T)
y2=matrix(data=1, nrow=1, ncol=T)
#Solve this system recursively based on the initialisation
for (t in 2:T){
y1[,t] = J[1,1]*y1[, t-1] + J[1,2]*y2[, t-1]
y2[,t] = J[2,1]*y1[, t-1] + J[2,2]*y2[, t-1]
} # close time loop
# Plot dynamics of y1
plot(y1[1, 1:15],type="l", col=1, lwd=2, lty=1, xlab="Time", ylab="y1")
title(main="", cex=0.8)
library(matlib)
options(rgl.useNULL = TRUE)
library(rgl)
install.packages("rgl")
install.packages("rgl")
library(matlib)
y0=c(y1[1,1],y2[1,1])  # create vector with initial conditions y0
c=inv(evecs_norm)%*%y0
c
# Calculate cycle length
L=(2*pi)/(acos(re/mod))
# Calculate cycle length
L=(2*pi)/(acos(re/mod))
t=10
evecs_norm[2,1]*c[1,1]*evals[1]^t + evecs_norm[2,1]*c[2,1]*evals[2]^t #analytical solution
y2[,t+1] # simulated
# Calculate cycle length
L=(2*pi)/(acos(re/mod))
# Compute solution  for y2 manually for t=10 and compare with simulated solution
t=10
evecs_norm[2,1]*c[1,1]*evals[1]^t + evecs_norm[2,1]*c[2,1]*evals[2]^t #analytical solution
y2[,t+1] # simulated
# Calculate cycle length
L=(2*pi)/(acos(re/mod))
no <- 1:14
country <- c('Cambodia', 'Thailand', 'Laos', 'Finland', )
>
country <- c('Cambodia', 'Thailand', 'Laos', 'Finland', 'Denmark', 'Germany', 'Switzerland', 'Spain', 'France', 'Vietnam', 'Indonesia', 'China', 'United Kingdom')
visited <- c(1:14)
city <- c(1:14)
visitedData <- data.frame(no, country, city, visited)
country <- c('Cambodia', 'Thailand', 'Laos', 'Finland', 'Denmark', 'Germany', 'Switzerland', 'Spain', 'France', 'Vietnam', 'Indonesia', 'China', 'United Kingdom', 'Malaysia')
visitedData <- data.frame(no, country, city, visited)
| No                    | Country        | City/Province | Year of Visited |
visitedData
save.image("~/Library/CloudStorage/OneDrive-CDRI/01_Projects/13_Courses/Shared Material Advanced Methods Summer School 2024/2 Dynamic Models/visitedData.RData")
library(simplermarkdown)
md_table(head(visitedData))
library(simplermarkdown)
md_table(visitedData)
view(visitedData)
The list below is counting countries that I have been visited as a tourist and the traveling for business purposes: Conference presentation and summer schools. Look at \[\[Travel Places\]\] to see date for visiting and city, which classified by year of visit.
load("visitedData.RData")
View(visitedData)
View(visitedData)
View(visitedData)
dr
cd
rs
getwd()
getwd(/Users/knith/Mirror/05_Website/saerd)
setwd(/Users/knith/Mirror/05_Website/saerd)
setwd("/Users/knith/Mirror/05_Website/saerd")
getwd()
getwd()
Kosal Nith (Young Scholars Initiative) <br>
Chanrith Ngin (Cambodia Development Resource Institute) <br>
